// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User model - Core authentication and user management
model User {
  id        String   @id @default(uuid()) @db.Uuid
  email     String   @unique
  firstName String?  @map("first_name")
  lastName  String?  @map("last_name")
  role      UserRole @default(STAFF)
  
  // Contact & preferences fields (Step 8)
  phone           String?
  addressLine1    String?  @map("address_line1")
  addressLine2    String?  @map("address_line2")
  city            String?
  stateOrProvince String?  @map("state_or_province")
  postalCode      String?  @map("postal_code")
  country         String?
  preferences     Json?
  notes           String?  @db.Text
  theme           String?
  
  // Supabase Auth integration
  authId    String?  @unique @map("auth_id") // Supabase auth.users.id
  passwordHash String? @map("password_hash") // bcrypt hashed password
  
  // Metadata
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Mews Sync
  mewsId    String?  @unique @map("mews_id")
  syncedAt  DateTime? @map("synced_at")
  syncStatus SyncStatus @default(PENDING) @map("sync_status")
  
  // Data Completeness Tracking
  profileCompleteness Int @default(0) @map("profile_completeness") // 0-100%
  lastCompletenessCheck DateTime? @map("last_completeness_check")
  
  // Future relationships (will be added in later steps)
  // guests     Guest[]     // Step 9: Guest management
  // vendors    Vendor[]    // Step 11: Vendor management  
  // requests   ConciergeRequest[] // Step 13: Concierge requests
  
  bio       String?  @db.Text
  avatarUrl String?
  
  // Relationships
  createdGuests Guest[] @relation("CreatedBy")
  vendorsCreated Vendor[] @relation("VendorCreatedBy")
  passwordResetTokens PasswordResetToken[]
  auditLogs          AuditLog[]
  mewsSyncLogs       MewsSyncLog[]
  
  @@map("users")
}

model Guest {
  id              String      @id @default(uuid())
  firstName       String      @map("first_name")
  lastName        String      @map("last_name")
  email           String      @unique
  phone           String?
  dateOfBirth     DateTime?   @map("date_of_birth")
  
  addressLine1    String?
  addressLine2    String?
  city            String?
  stateOrProvince String?
  postalCode      String?
  country         String?
  
  preferences     Json?       @map("preferences")
  externalBookingIds String[] @default([]) @map("external_booking_ids")
  notes           String?     @db.Text
  
  status          GuestStatus @default(ACTIVE)
  
  // Mews Integration Fields
  mewsId    String?  @unique @map("mews_id")
  syncedAt  DateTime? @map("synced_at")
  syncStatus SyncStatus @default(PENDING) @map("sync_status")
  
  // Data Completeness Tracking
  profileCompleteness Int @default(0) @map("profile_completeness") // 0-100%
  lastCompletenessCheck DateTime? @map("last_completeness_check")
  dataGaps Json? @map("data_gaps") // Array of missing required fields
  
  // Guest Intelligence
  vipScore Float @default(0) @map("vip_score") // 0-100 based on spending, frequency, etc.
  lastStay DateTime? @map("last_stay")
  totalStays Int @default(0) @map("total_stays")
  averageSpending Float? @map("average_spending")
  
  // Relationships
  createdById     String      @db.Uuid @map("created_by_id")
  createdBy       User        @relation("CreatedBy", fields: [createdById], references: [id])
  
  // Metadata
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  
  // Audit relationships
  mewsSyncLogs    MewsSyncLog[]
  
  @@map("guests")
}

enum GuestStatus {
  ACTIVE
  INACTIVE
  VIP
  BLACKLISTED
  
  @@map("guest_status")
}

enum SyncStatus {
  PENDING
  SYNCED
  FAILED
  CONFLICT
  
  @@map("sync_status")
}

// User role enumeration for RBAC
enum UserRole {
  ADMIN
  STAFF
  CONCIERGE
  VIEWER

  @@map("user_role")
}

enum VendorCategory {
  FOOD
  TRANSPORT
  ENTERTAINMENT
  MAINTENANCE
  OTHER

  @@map("vendor_category")
}

model Vendor {
  id            String         @id @default(uuid())
  name          String
  contactPerson String?        @map("contact_person")
  category      VendorCategory @default(OTHER)
  servicesOffered String[]     @default([]) @map("services_offered")
  rating        Float          @default(0)
  phone         String?
  email         String?
  website       String?
  notes         String?        @db.Text

  // Mews Integration Fields
  mewsId    String?  @unique @map("mews_id")
  syncedAt  DateTime? @map("synced_at")
  syncStatus SyncStatus @default(PENDING) @map("sync_status")

  createdById   String         @db.Uuid @map("created_by_id")
  createdBy     User           @relation("VendorCreatedBy", fields: [createdById], references: [id])

  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")

  // Audit relationships
  mewsSyncLogs    MewsSyncLog[]

  @@map("vendors")
}

// Password reset token model for secure password recovery
model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String   @db.Uuid @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime @map("expires_at")
  used      Boolean  @default(false)
  
  createdAt DateTime @default(now()) @map("created_at")
  
  @@map("password_reset_tokens")
}

// Audit log model to track profile updates and other user actions
model AuditLog {
  id        String   @id @default(uuid())
  userId    String   @db.Uuid @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  action    String   // e.g., "UPDATE_PROFILE"
  newData   Json?
  createdAt DateTime @default(now()) @map("created_at")

  @@map("audit_logs")
}

// Mews Sync Log model to track sync operations
model MewsSyncLog {
  id          String   @id @default(uuid())
  entityType  String   @map("entity_type") // "User", "Guest", "Vendor"
  entityId    String   @map("entity_id")
  operation   String   // "CREATE", "UPDATE", "DELETE", "SYNC"
  direction   SyncDirection @default(INBOUND) // "INBOUND", "OUTBOUND"
  status      SyncStatus @default(PENDING)
  
  // Mews specific data
  mewsEventId String?  @map("mews_event_id")
  mewsData    Json?    @map("mews_data")
  platformData Json?   @map("platform_data")
  
  // Error tracking
  errorMessage String? @map("error_message")
  retryCount   Int     @default(0) @map("retry_count")
  
  // Relationships
  userId    String?   @db.Uuid @map("user_id")
  user      User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  guestId   String?   @db.Uuid @map("guest_id")
  guest     Guest?    @relation(fields: [guestId], references: [id], onDelete: SetNull)
  
  vendorId  String?   @db.Uuid @map("vendor_id")
  vendor    Vendor?   @relation(fields: [vendorId], references: [id], onDelete: SetNull)
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  @@map("mews_sync_logs")
}

enum SyncDirection {
  INBOUND
  OUTBOUND
  
  @@map("sync_direction")
}

// Business Rules Engine - Configurable validation rules
model BusinessRule {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  entityType  String   @map("entity_type") // "User", "Guest", "Vendor"
  field       String   // Field to validate
  ruleType    RuleType @map("rule_type")
  ruleConfig  Json     @map("rule_config") // Rule-specific configuration
  isActive    Boolean  @default(true) @map("is_active")
  priority    Int      @default(0) // Higher number = higher priority
  
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  @@map("business_rules")
}

enum RuleType {
  REQUIRED
  FORMAT
  RANGE
  CUSTOM
  
  @@map("rule_type")
}

// Data Completeness Configuration
model CompletenessConfig {
  id          String   @id @default(uuid())
  entityType  String   @unique @map("entity_type") // "User", "Guest", "Vendor"
  fieldWeights Json    @map("field_weights") // Field name -> weight (0-100)
  requiredFields String[] @default([]) @map("required_fields")
  optionalFields String[] @default([]) @map("optional_fields")
  
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  @@map("completeness_configs")
} 